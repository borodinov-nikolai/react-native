/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    mutation signUp($input: SignUpInput!) {\n        signUp(signUpInput: $input) {\n            jwt\n        }\n    }\n        ": typeof types.SignUpDocument,
    "\n    mutation signIn($input: SignInInput!) {\n        signIn(signInInput: $input) {\n            jwt\n        }      \n    }\n        ": typeof types.SignInDocument,
    "\n    mutation signOut {\n        signOut\n    }\n    ": typeof types.SignOutDocument,
    "\n        mutation tokensRefresh {\n            tokensRefresh {\n                jwt\n            }\n        }\n        ": typeof types.TokensRefreshDocument,
    "\n    query getCartItems($input: GetCartItemsArgs!) {\n        cartItems(args: $input) {\n            id\n            type\n            stock\n            number\n            new\n            name\n            price\n            createdAt\n            catalogPreview {\n                id\n                name\n                url\n            }\n            seriesPreview {\n                id\n                name\n                url\n            }\n            nftPreview {\n                id\n                name\n                url\n            }\n            series {\n                id\n                name\n                originalName\n            }\n        }\n    }\n    ": typeof types.GetCartItemsDocument,
    "\n       query getProducts($input: GetProductsArgs) {\n        products(args: $input) {\n          data {\n            id\n            type\n            number\n            name\n            price\n            features\n            exclusive\n            stock\n            new\n            series {\n              id\n              name\n              originalName\n            }\n            catalogPreview {\n                id\n                name\n                url\n            }\n          }\n          meta {\n            pagination {\n                page\n                pageSize\n                total\n            }\n          }\n        }\n       }\n    ": typeof types.GetProductsDocument,
    "\n  query getProduct($input: Int!) {\n   product(id: $input) {\n       id\n       number\n       name\n       price\n       features\n       exclusive\n       stock\n       category\n       description\n       series {\n         id\n         originalName\n       }\n       images {\n        id\n        name\n        url\n       }\n   }\n  }\n": typeof types.GetProductDocument,
    "\n        query getMe {\n            getMe {\n                id\n                login\n                firstName\n                secondName\n                phone\n                social\n                email\n                city\n                street\n                house\n                building\n                apartment\n                cart\n                userSeries {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    seriesId\n                    updatedAt\n                    series {\n                        id\n                        name\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n                userNfts {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    nftId\n                    updatedAt\n                    nft {\n                        id\n                        name\n                        event1_date\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    ": typeof types.GetMeDocument,
    "\n    mutation updateMe($input: UpdateMeInput!) {\n        updateMe(updateMeInput: $input){\n            id\n        }\n    }\n    ": typeof types.UpdateMeDocument,
};
const documents: Documents = {
    "\n    mutation signUp($input: SignUpInput!) {\n        signUp(signUpInput: $input) {\n            jwt\n        }\n    }\n        ": types.SignUpDocument,
    "\n    mutation signIn($input: SignInInput!) {\n        signIn(signInInput: $input) {\n            jwt\n        }      \n    }\n        ": types.SignInDocument,
    "\n    mutation signOut {\n        signOut\n    }\n    ": types.SignOutDocument,
    "\n        mutation tokensRefresh {\n            tokensRefresh {\n                jwt\n            }\n        }\n        ": types.TokensRefreshDocument,
    "\n    query getCartItems($input: GetCartItemsArgs!) {\n        cartItems(args: $input) {\n            id\n            type\n            stock\n            number\n            new\n            name\n            price\n            createdAt\n            catalogPreview {\n                id\n                name\n                url\n            }\n            seriesPreview {\n                id\n                name\n                url\n            }\n            nftPreview {\n                id\n                name\n                url\n            }\n            series {\n                id\n                name\n                originalName\n            }\n        }\n    }\n    ": types.GetCartItemsDocument,
    "\n       query getProducts($input: GetProductsArgs) {\n        products(args: $input) {\n          data {\n            id\n            type\n            number\n            name\n            price\n            features\n            exclusive\n            stock\n            new\n            series {\n              id\n              name\n              originalName\n            }\n            catalogPreview {\n                id\n                name\n                url\n            }\n          }\n          meta {\n            pagination {\n                page\n                pageSize\n                total\n            }\n          }\n        }\n       }\n    ": types.GetProductsDocument,
    "\n  query getProduct($input: Int!) {\n   product(id: $input) {\n       id\n       number\n       name\n       price\n       features\n       exclusive\n       stock\n       category\n       description\n       series {\n         id\n         originalName\n       }\n       images {\n        id\n        name\n        url\n       }\n   }\n  }\n": types.GetProductDocument,
    "\n        query getMe {\n            getMe {\n                id\n                login\n                firstName\n                secondName\n                phone\n                social\n                email\n                city\n                street\n                house\n                building\n                apartment\n                cart\n                userSeries {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    seriesId\n                    updatedAt\n                    series {\n                        id\n                        name\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n                userNfts {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    nftId\n                    updatedAt\n                    nft {\n                        id\n                        name\n                        event1_date\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    ": types.GetMeDocument,
    "\n    mutation updateMe($input: UpdateMeInput!) {\n        updateMe(updateMeInput: $input){\n            id\n        }\n    }\n    ": types.UpdateMeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation signUp($input: SignUpInput!) {\n        signUp(signUpInput: $input) {\n            jwt\n        }\n    }\n        "): (typeof documents)["\n    mutation signUp($input: SignUpInput!) {\n        signUp(signUpInput: $input) {\n            jwt\n        }\n    }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation signIn($input: SignInInput!) {\n        signIn(signInInput: $input) {\n            jwt\n        }      \n    }\n        "): (typeof documents)["\n    mutation signIn($input: SignInInput!) {\n        signIn(signInInput: $input) {\n            jwt\n        }      \n    }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation signOut {\n        signOut\n    }\n    "): (typeof documents)["\n    mutation signOut {\n        signOut\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        mutation tokensRefresh {\n            tokensRefresh {\n                jwt\n            }\n        }\n        "): (typeof documents)["\n        mutation tokensRefresh {\n            tokensRefresh {\n                jwt\n            }\n        }\n        "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query getCartItems($input: GetCartItemsArgs!) {\n        cartItems(args: $input) {\n            id\n            type\n            stock\n            number\n            new\n            name\n            price\n            createdAt\n            catalogPreview {\n                id\n                name\n                url\n            }\n            seriesPreview {\n                id\n                name\n                url\n            }\n            nftPreview {\n                id\n                name\n                url\n            }\n            series {\n                id\n                name\n                originalName\n            }\n        }\n    }\n    "): (typeof documents)["\n    query getCartItems($input: GetCartItemsArgs!) {\n        cartItems(args: $input) {\n            id\n            type\n            stock\n            number\n            new\n            name\n            price\n            createdAt\n            catalogPreview {\n                id\n                name\n                url\n            }\n            seriesPreview {\n                id\n                name\n                url\n            }\n            nftPreview {\n                id\n                name\n                url\n            }\n            series {\n                id\n                name\n                originalName\n            }\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n       query getProducts($input: GetProductsArgs) {\n        products(args: $input) {\n          data {\n            id\n            type\n            number\n            name\n            price\n            features\n            exclusive\n            stock\n            new\n            series {\n              id\n              name\n              originalName\n            }\n            catalogPreview {\n                id\n                name\n                url\n            }\n          }\n          meta {\n            pagination {\n                page\n                pageSize\n                total\n            }\n          }\n        }\n       }\n    "): (typeof documents)["\n       query getProducts($input: GetProductsArgs) {\n        products(args: $input) {\n          data {\n            id\n            type\n            number\n            name\n            price\n            features\n            exclusive\n            stock\n            new\n            series {\n              id\n              name\n              originalName\n            }\n            catalogPreview {\n                id\n                name\n                url\n            }\n          }\n          meta {\n            pagination {\n                page\n                pageSize\n                total\n            }\n          }\n        }\n       }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getProduct($input: Int!) {\n   product(id: $input) {\n       id\n       number\n       name\n       price\n       features\n       exclusive\n       stock\n       category\n       description\n       series {\n         id\n         originalName\n       }\n       images {\n        id\n        name\n        url\n       }\n   }\n  }\n"): (typeof documents)["\n  query getProduct($input: Int!) {\n   product(id: $input) {\n       id\n       number\n       name\n       price\n       features\n       exclusive\n       stock\n       category\n       description\n       series {\n         id\n         originalName\n       }\n       images {\n        id\n        name\n        url\n       }\n   }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query getMe {\n            getMe {\n                id\n                login\n                firstName\n                secondName\n                phone\n                social\n                email\n                city\n                street\n                house\n                building\n                apartment\n                cart\n                userSeries {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    seriesId\n                    updatedAt\n                    series {\n                        id\n                        name\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n                userNfts {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    nftId\n                    updatedAt\n                    nft {\n                        id\n                        name\n                        event1_date\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    "): (typeof documents)["\n        query getMe {\n            getMe {\n                id\n                login\n                firstName\n                secondName\n                phone\n                social\n                email\n                city\n                street\n                house\n                building\n                apartment\n                cart\n                userSeries {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    seriesId\n                    updatedAt\n                    series {\n                        id\n                        name\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n                userNfts {\n                    id\n                    checkedItems {\n                        id\n                    }\n                    saved\n                    nftId\n                    updatedAt\n                    nft {\n                        id\n                        name\n                        event1_date\n                        preview {\n                            id\n                            url\n                        }\n                        products {\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateMe($input: UpdateMeInput!) {\n        updateMe(updateMeInput: $input){\n            id\n        }\n    }\n    "): (typeof documents)["\n    mutation updateMe($input: UpdateMeInput!) {\n        updateMe(updateMeInput: $input){\n            id\n        }\n    }\n    "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;